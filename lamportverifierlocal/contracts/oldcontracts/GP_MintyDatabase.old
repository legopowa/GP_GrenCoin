// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

// Parent contract AnonID
// contract AnonID {
//     struct LastPlayedInfo {
//         uint256 gameID;
//         uint256 timestamp;
//     }

//     mapping(address => uint256) public minutesPlayed;
//     mapping(address => LastPlayedInfo) public lastPlayed;
//     mapping(address => bool) isContractPermitted;

//     event MinutesPlayedIncremented(address indexed user, uint256 minutes);
//     event LastPlayedUpdated(address indexed user, uint256 gameId);

//     function incrementMinutesPlayed(address user, uint256 _minutes) external {
//         require(isContractPermitted[msg.sender], "Not permitted to modify minutes played");
//         minutesPlayed[user] += _minutes;
//         emit MinutesPlayedIncremented(user, _minutes);
//     }

//     function updateLastPlayed(address _address, uint256 _gameId) external {
//         require(isContractPermitted[msg.sender], "Not permitted to update last played");
//         lastPlayed[_address] = LastPlayedInfo({
//             gameID: _gameId,
//             timestamp: block.timestamp
//         });
//         emit LastPlayedUpdated(_address, _gameId);
//     }

//     // Additional functions and security checks as necessary...
// }
interface IAnonID {
    function incrementMinutesPlayed(address user, uint256 _minutes) external;
    function updateLastPlayed(address _address, uint256 _gameId) external;
    function isWhitelisted(address _address) external view returns (bool);
}
// MintyDatabase contract inheriting from AnonID
contract MintyDatabase is IAnonID {
    // ERC20 Token variables
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;
    uint256 public gameID; // Variable to store the game ID 

    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    // Player Database variables
    struct Player {
        bool isRegistered;
        bool isValidator;
        bool isModerator;
        bool isTourneyMod;
        bool isGameAdmin;
        bytes32 forumKey; // Unique key for forum entitlements
        string steamID;
        address rewardAddress;
    }
    mapping(address => Player) public playerData;
    address[] public playerAddresses;

    // Shared variables
    address public gameValContract; // Address of the game subcontractor
    IAnonID public anonIDContract; // Reference to the AnonID contract
    address public onrampContract; // Address of the onramp contract
    address public forumContract; // Address of the forum contract

    // Events
    event GameValContractUpdated(address indexed newGameValContract);
    event OnrampContractUpdated(address indexed newOnrampContract);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    // Constructor
    //constructor(string memory _name, string memory _symbol, uint8 _decimals) { //}, uint256 _totalSupply) {
    constructor() {
        name = "GPConcs";
        symbol = "GPConcs";
        decimals = 18;
        balanceOf[msg.sender] = 80000000000000000000000;
        gameID = "TFC";
    }

    // Function to set the AnonID contract address
    function setAnonIDContractAddress(address _anonIDAddress) public {
        // Add appropriate security checks
        anonIDContract = IAnonID(_anonIDAddress);
    }

    // Function to interact with AnonID contract
    function updateAnonIDData(address _user, uint256 _minutes, uint256 _gameId) public {
        // Ensure the caller has permission to update AnonID data
        anonIDContract.incrementMinutesPlayed(_user, _minutes);
        anonIDContract.updateLastPlayed(_user, _gameId);
    }
    // ERC20 Token functions
    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(balanceOf[msg.sender] >= _value, "Insufficient balance");
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;
        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_value <= balanceOf[_from]);
        require(_value <= allowance[_from][msg.sender]);
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        allowance[_from][msg.sender] -= _value;
        emit Transfer(_from, _to, _value);
        return true;
    }
    // Modified mint function
    function mint(address _to, uint256 _amount, uint256 _minutesPlayed) public {
        require(msg.sender == gameValContract, "Only the game subcontractor can mint");
        totalSupply += _amount;
        balanceOf[_to] += _amount;
        emit Transfer(address(0), _to, _amount); // Minting event

        // Update minutes played and last played
        updateAnonIDData(_to, _minutesPlayed, gameID);

    }

    // Player Database functions
// Assuming IAnonID interface and anonIDContract are already defined and set up in your contract

    function addOrUpdatePlayer(address _address, string memory _steamID, bool _isValidator, bool _isRegistered) public {
        require(msg.sender == onrampContract, "Only the onramp contract can add/update players");
        require(anonIDContract.isWhitelisted(_address), "Address not whitelisted in AnonID");

        Player storage player = playerData[_address];
        bool alreadyRegistered = player.isRegistered;

        playerData[_address] = Player({
            steamID: _steamID,
            isValidator: _isValidator,
            isRegistered: _isRegistered,
            rewardAddress: _address,
            // Zero out or set default values for the non-argument fields
            isModerator: false,
            isTourneyMod: false,
            isGameAdmin: false,
            forumKey: 0 // Assuming 0 is the default value for forumKey
        });

        if (!alreadyRegistered) {
            playerAddresses.push(_address);
        }
    }


    // ... [Other Player Database functions]

    // Shared functions
    function updateGameValContract(address _gameValContract) public {
        gameValContract = _gameValContract;
        emit GameValContractUpdated(_gameValContract);
    }

    function updateOnrampContract(address _onrampContract) public {
        onrampContract = _onrampContract;
        emit OnrampContractUpdated(_onrampContract);
    }
    // ... [Previous variables and functions]


    // ... [Rest of the existing contract]

    // Function to update the forum contract address
    function updateForumContract(address _forumContract) public {
        // Add appropriate security checks
        forumContract = _forumContract;
    }

    // Function to change a player's moderator status
    function toggleModeratorStatus(address _player, bool _status) external {
        require(msg.sender == forumContract, "Only the forum contract can modify moderator status");
        playerData[_player].isModerator = _status;
    }

    // Function to change a player's tournament moderator status
    function toggleTourneyModStatus(address _player, bool _status) external {
        require(msg.sender == forumContract, "Only the forum contract can modify tournament moderator status");
        playerData[_player].isTourneyMod = _status;
    }

    // Function to set or update a player's forum key
    function setForumKey(address _player, bytes32 _key) external {
        require(msg.sender == forumContract, "Only the forum contract can set forum key");
        playerData[_player].forumKey = _key;
    }

    // ... [Additional functions and security checks as necessary]
}
